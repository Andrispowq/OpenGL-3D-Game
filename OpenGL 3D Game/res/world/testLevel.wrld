# PREHISTORIC ENGINE WORLD FILE #

# DIRECTORIES
directories.models res/models/
directories.textures res/textures/

# MODELS/TEXTURE TO LOAD
models.load quadModel quad.obj
models.load sphereModel cube.obj

textures.load oak_DIF oakFloor/oakFloor_DIF.png
textures.load oak_NRM oakFloor/oakFloor_NRM.png
textures.load oak_MET oakFloor/oakFloor_MET.png
textures.load oak_RGH oakFloor/oakFloor_RGH.png

# CREATING MATERIALS FROM TEXTURES AND OTHER DATA
# add will create a new Material
# Material components: texture, vec4, vec3, vec2, float, int
materials.add mat_quad
materials.mat_quad.texture albedo oak_DIF
materials.mat_quad.texture normal oak_NRM
materials.mat_quad.texture metallic oak_MET
materials.mat_quad.texture roughness oak_RGH
materials.mat_quad.float ambientOcclusion 1
materials.mat_quad.vec3 emission 0,0,0

materials.add mat_light
materials.mat_light.vec3 colour 0.78,0.56,0.45
materials.mat_light.float metallic 0
materials.mat_light.float roughness 0.4
materials.mat_light.vec3 emission 0.9,0.7,0.2

# GAMEOBJECT CREATION
# You can specify position, rotation, and scale, but only in this order, and you cannot have rotation or scale specified without position and scale without position and rotatino
world.object cube0 0,1,0 90,0,0 1,1,1 //position, rotation, scaling
world.object cube1 0,-1,0 90,0,0 1,1,1 //position, rotation, scaling
world.object cube2 1,0,0 0,90,0 1,1,1 //position, rotation, scaling
world.object cube3 -1,0,0 0,90,0 1,1,1 //position, rotation, scaling
world.object cube4 0,0,1 0,0,0 1,1,1 //position, rotation, scaling
world.object cube5 0,0,-1 0,0,0 1,1,1 //position, rotation, scaling
world.object otherQuad -10,0,0 90,0,0 1,1,1 //position, rotation, scaling
world.object light0 10,70,0
world.object light1 -10,40,0
world.object light2 20,50,0

# COMPONENT ADDITION
# Supported component tpyes: Renderer, Light
# Renderer: model name, shader type (basic, or pbr), and material name required
# Light: light colour (3 components, [0;1]), and an intensity required
object.cube0.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.cube1.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.cube2.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.cube3.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.cube4.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.cube5.component Renderer quadModel,pbr,mat_quad //model name, shader type(currently: basic, pbr), material name
object.otherQuad.component Renderer quadModel,basic,mat_quad //model name, shader type(currently: basic, pbr), material name

object.light0.component Light 1,1,1;10000
object.light0.component Renderer sphereModel,pbr,mat_light 

object.light1.component Light 0,0,1;3000
object.light1.component Renderer sphereModel,pbr,mat_light 

object.light2.component Light 1,0,0;4000
object.light2.component Renderer sphereModel,pbr,mat_light 